# -*- coding: utf-8 -*-
"""creat_dictionary.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qleFbL3RKs0RZ_qdaNeiVU2WM2L0qllt
"""

from tqdm import tqdm
from tifffile import imread
import pickle
import os
import numpy as np
import imageio

# Create cell_id:position_index dictionary
def cell_pos_dict(mask):
  # A function to create a dictionary of cell_id:position_index
  # mask is a 2D image, where each cell has a unique id (1,2,....,N)
  # returns a dictionary with cell_id as key and position_index(tuple:(y,x)) as value
  cell_pos_dict = {}
  for i in tqdm(range(mask.shape[0])):
    for j in range(mask.shape[1]):
      c = mask[i,j]
      if c == 0:
        continue
      if c not in cell_pos_dict:
        cell_pos_dict[c] = ([], [])

      cell_pos_dict[c][0].append(i)
      cell_pos_dict[c][1].append(j)

  return cell_pos_dict

def create_one_cell_post_dict(cell_pos_path,mask_path,mask_file):
  mask = read_mask(mask_path+mask_file)
  print("Mask shape:",mask.shape)
  if mask.ndim > 2:
    mask = mask[0,:,:]
  #exists = os.path.exists(cell_pos_path+f"cell_pos_{mask_file}.pkl")
  exists = os.path.exists(cell_pos_path)
  if not exists:
    os.mkdir(cell_pos_path)
  pos_dict = cell_pos_dict(mask)
  mask_file = mask_file.replace("/","_")
  print("mask_file",mask_file)
  with open(cell_pos_path+f"cell_pos_{mask_file}.pkl", "wb") as file_handle:
    pickle.dump(pos_dict, file_handle)
  print("File name:",mask_file)
  print("Dictionary length:",len(pos_dict))

def create_cell_pos_dict(base_dir,mask_path):
    # A function to read the masks from the "mask_path", then create and save each dictionary for each mask
    cell_pos_path = os.path.join(base_dir,"cell_position_dictionary")
    if not os.path.exists(cell_pos_path):
      os.mkdir(cell_pos_path)
      
    mask_list = os.listdir(mask_path)
    #mask_list = [i for i in mask_list if i.endswith(".tif")]
    print("Number of mask images:",len(mask_list))

    for i in range(len(mask_list)):
      file = mask_list[i]
      mask_file = os.path.join(mask_path,file)
      mask = read_mask(mask_file)
      print("Mask shape:",mask.shape)
      
      exists = os.path.exists(cell_pos_path+f"/cell_pos_{file}.pkl")
      if exists:
         continue
      else:
        pos_dict = cell_pos_dict(mask)
        with open(cell_pos_path+f"/cell_pos_{file}.pkl", "wb") as file_handle:
          pickle.dump(pos_dict, file_handle)
        print("File name:",file)
        print("Dictionary length:",len(pos_dict))

def read_mask(file_path):
    # a function to read different format of masks(npy or tiff/tif)
   
    if file_path.endswith('.npy'):
        # If the file has .npy extension, use np.load() to load the file
        try:
            data = np.load(file_path,allow_pickle=True).tolist()['masks']
            return data
        except Exception as e:
            print(f"Error loading {file_path} as numpy array:", e)
            return None
    elif file_path.endswith('.tiff') or file_path.endswith('.tif'):
        # If the file has .tiff or .tif extension, use tf.imread() to load the file
        try:
            data = imread(file_path).astype(np.uint32)
            return data
        except Exception as e:
            print(f"Error loading {file_path} as TIFF image:", e)
            return None
    elif file_path.endswith(".png"):
        try:
            data = imageio.imread(file_path)
            return data
        except Exception as e:
            print(f"Error loading {file_path} as TIFF image:", e)
            return None

    else:
        print(f"Unsupported file format for {file_path}")
        return None


if __name__ == "__main__":
    
    base_dir = "/projects/murphylab/cell_phenotyping/data/bone_marrow/"      
    mask_path = "/projects/murphylab/cell_phenotyping/data/bone_marrow/AML_masks/"
    #os.makedirs(cell_position_path,exist_ok=True)
    create_cell_pos_dict(base_dir,mask_path)